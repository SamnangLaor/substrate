// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-08-02, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn instrument(c: u32, ) -> Weight;
	fn code_load(c: u32, ) -> Weight;
	fn code_refcount(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn claim_surcharge(c: u32, ) -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_delta(d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(4_330_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_294_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(184_096_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((40_690_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:1 w:0)
	fn instrument(c: u32, ) -> Weight {
		(106_598_000 as Weight)
			// Standard Error: 172_000
			.saturating_add((77_962_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn code_load(c: u32, ) -> Weight {
		(7_145_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_711_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	fn code_refcount(c: u32, ) -> Weight {
		(11_473_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_760_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: System Account (r:1 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(221_515_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((120_127_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 6_000
			.saturating_add((2_327_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:0)
	fn instantiate(s: u32, ) -> Weight {
		(202_298_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_249_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn call() -> Weight {
		(178_779_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acafbc76efb655f52a2] (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a45e3386f1a83f00b28] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a96e4ef3ab80b5c3a5f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3d24875569a319056f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ad561e495f01c762] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3b624bb134596373c1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aadbe519bace97698b4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7e33b1a343f33065bd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a626f271ae6979bbffe] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ce585fd4ae98b830b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac889c022f51a43b527] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f6353225ab0496d48] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab578892d355575c3e4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a02b4c8040b81dc785d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a8d13a70c1e380292ea] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2e4d2fc709d989c778] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a6df81b28bd3ec99a3a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af54f74589657eac0fd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a1849a3092175db4a2f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f05ecdc6c2c42c9fb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a24c3c0036dfb085bb9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a44d725ac77836eb10b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad04db6c692ab73d90d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a873009d6cdb99c5a4c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa958795fbfc2b5fa41] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a205b6f659d219c8cbc] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ade54b3bc3d3cdb1aeb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a538b748c1c5f92be98] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad50de2ad89aaa1e067] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a0576917f19ecaf2a3f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a5b44bd2793555a71e7] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc874645f7bbf62e62] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ae1b958a847e98bc8] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a396ae49d5311ee6bd1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa5d56999a2ebd1c4c9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a72f370c054587f81a5] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3a32934e459acb2ceb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac10fd56a5e084aae1c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2ba8e27fcdbc3ab4f2] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4a75b804eec44f3f2a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ebb181fc616bfdb4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a9aaf019a62fd907a8a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a19730285453eb7702a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acced4c24d0ebee7c29] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae458a57da6a2a6280a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a83b9f09b407c57d07e] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc9fc095b3aaaef755] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a587ccf84053d9950ff] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a13d53bcf137f3784e9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abb79d34fb381ebd7c1] (r:1 w:0)
	fn claim_surcharge(c: u32, ) -> Weight {
		(150_110_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_875_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(143_410_000 as Weight)
			// Standard Error: 147_000
			.saturating_add((236_377_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_address(r: u32, ) -> Weight {
		(148_391_000 as Weight)
			// Standard Error: 139_000
			.saturating_add((236_781_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(148_013_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((230_749_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(146_409_000 as Weight)
			// Standard Error: 219_000
			.saturating_add((500_432_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(144_551_000 as Weight)
			// Standard Error: 139_000
			.saturating_add((228_993_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(147_246_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((228_601_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(150_538_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((228_408_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(148_918_000 as Weight)
			// Standard Error: 131_000
			.saturating_add((229_244_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(142_597_000 as Weight)
			// Standard Error: 151_000
			.saturating_add((228_305_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(145_396_000 as Weight)
			// Standard Error: 133_000
			.saturating_add((228_766_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(156_322_000 as Weight)
			// Standard Error: 181_000
			.saturating_add((432_162_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_gas(r: u32, ) -> Weight {
		(130_559_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((114_844_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_input(r: u32, ) -> Weight {
		(130_329_000 as Weight)
			// Standard Error: 107_000
			.saturating_add((7_015_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(139_858_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_037_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_return(r: u32, ) -> Weight {
		(124_923_000 as Weight)
			// Standard Error: 97_000
			.saturating_add((4_927_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(133_152_000 as Weight)
			// Standard Error: 0
			.saturating_add((476_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(130_207_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((95_515_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af3fd4cc2fc8d170b6d] (r:1 w:0)
	fn seal_restore_to(r: u32, ) -> Weight {
		(158_034_000 as Weight)
			// Standard Error: 902_000
			.saturating_add((103_652_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_restore_to_per_delta(d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_031_000
			.saturating_add((2_489_391_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(149_906_000 as Weight)
			// Standard Error: 244_000
			.saturating_add((593_668_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(160_518_000 as Weight)
			// Standard Error: 292_000
			.saturating_add((863_809_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System EventTopics (r:400 w:400)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_109_675_000 as Weight)
			// Standard Error: 2_790_000
			.saturating_add((554_740_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 549_000
			.saturating_add((155_129_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(147_803_000 as Weight)
			// Standard Error: 136_000
			.saturating_add((156_398_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_debug_message(r: u32, ) -> Weight {
		(136_301_000 as Weight)
			// Standard Error: 133_000
			.saturating_add((128_916_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(141_712_000 as Weight)
			// Standard Error: 664_000
			.saturating_add((547_247_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(591_594_000 as Weight)
			// Standard Error: 291_000
			.saturating_add((42_815_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_115_000
			.saturating_add((1_046_832_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(20_866_000 as Weight)
			// Standard Error: 868_000
			.saturating_add((712_041_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(588_536_000 as Weight)
			// Standard Error: 244_000
			.saturating_add((90_823_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_transfer(r: u32, ) -> Weight {
		(73_599_000 as Weight)
			// Standard Error: 1_892_000
			.saturating_add((4_978_503_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 7_759_000
			.saturating_add((11_711_769_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:101 w:0)
	// Storage: Contracts CodeStorage (r:2 w:0)
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(11_579_973_000 as Weight)
			// Standard Error: 49_873_000
			.saturating_add((3_640_499_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 18_000
			.saturating_add((32_241_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 19_000
			.saturating_add((52_034_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(205 as Weight))
			.saturating_add(T::DbWeight::get().writes(101 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 41_527_000
			.saturating_add((21_264_449_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:101 w:101)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(15_127_132_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((34_006_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 54_000
			.saturating_add((54_942_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 54_000
			.saturating_add((181_128_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes(204 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(145_879_000 as Weight)
			// Standard Error: 158_000
			.saturating_add((230_505_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(485_127_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((465_667_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(148_329_000 as Weight)
			// Standard Error: 173_000
			.saturating_add((230_136_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(351_462_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((315_292_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(143_004_000 as Weight)
			// Standard Error: 161_000
			.saturating_add((210_341_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(476_308_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((131_858_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(146_997_000 as Weight)
			// Standard Error: 178_000
			.saturating_add((213_486_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(484_419_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((131_991_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(21_246_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((3_495_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(23_520_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((137_096_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(23_540_000 as Weight)
			// Standard Error: 309_000
			.saturating_add((215_905_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(21_326_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((13_234_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(20_904_000 as Weight)
			// Standard Error: 50_000
			.saturating_add((12_773_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(20_935_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((6_322_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(21_339_000 as Weight)
			// Standard Error: 82_000
			.saturating_add((14_272_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(21_360_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((15_509_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(34_523_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((145_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(21_353_000 as Weight)
			// Standard Error: 202_000
			.saturating_add((90_323_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(29_085_000 as Weight)
			// Standard Error: 667_000
			.saturating_add((196_178_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(224_839_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((3_856_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(21_278_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((3_285_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(21_467_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((3_621_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(21_045_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((5_087_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(24_698_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((8_043_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(24_294_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((8_764_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(23_495_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((3_622_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(21_882_000 as Weight)
			// Standard Error: 526_000
			.saturating_add((2_125_852_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(21_296_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((5_670_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(21_366_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((5_299_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(20_911_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((6_129_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(21_337_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((5_451_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(20_913_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((5_485_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(21_347_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((5_389_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(21_346_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((5_668_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(21_305_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_672_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(20_918_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((7_623_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(21_304_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_508_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(21_312_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_438_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(21_384_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_299_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(21_326_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((7_559_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(21_265_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_751_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(20_861_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_373_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(21_348_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_378_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(20_899_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_421_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(20_913_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((7_291_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(20_990_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_237_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(20_879_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((7_391_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(20_720_000 as Weight)
			// Standard Error: 763_000
			.saturating_add((15_090_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(21_323_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_640_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(21_341_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((13_299_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(21_384_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((12_555_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(20_874_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_587_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(20_939_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((7_450_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(20_943_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_286_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(21_251_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((7_849_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(20_909_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_581_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(20_897_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_455_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(21_255_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_629_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(21_306_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_479_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize() -> Weight {
		(4_330_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_294_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(184_096_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((40_690_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:1 w:0)
	fn instrument(c: u32, ) -> Weight {
		(106_598_000 as Weight)
			// Standard Error: 172_000
			.saturating_add((77_962_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn code_load(c: u32, ) -> Weight {
		(7_145_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_711_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	fn code_refcount(c: u32, ) -> Weight {
		(11_473_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_760_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: System Account (r:1 w:1)
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(221_515_000 as Weight)
			// Standard Error: 101_000
			.saturating_add((120_127_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 6_000
			.saturating_add((2_327_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts AccountCounter (r:1 w:0)
	fn instantiate(s: u32, ) -> Weight {
		(202_298_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_249_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn call() -> Weight {
		(178_779_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acafbc76efb655f52a2] (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a45e3386f1a83f00b28] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a96e4ef3ab80b5c3a5f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3d24875569a319056f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ad561e495f01c762] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3b624bb134596373c1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aadbe519bace97698b4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7e33b1a343f33065bd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a626f271ae6979bbffe] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ce585fd4ae98b830b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac889c022f51a43b527] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f6353225ab0496d48] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ab578892d355575c3e4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a02b4c8040b81dc785d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a8d13a70c1e380292ea] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2e4d2fc709d989c778] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a6df81b28bd3ec99a3a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af54f74589657eac0fd] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a1849a3092175db4a2f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4f05ecdc6c2c42c9fb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a24c3c0036dfb085bb9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a44d725ac77836eb10b] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad04db6c692ab73d90d] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a873009d6cdb99c5a4c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa958795fbfc2b5fa41] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a205b6f659d219c8cbc] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ade54b3bc3d3cdb1aeb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a538b748c1c5f92be98] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ad50de2ad89aaa1e067] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a0576917f19ecaf2a3f] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a5b44bd2793555a71e7] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc874645f7bbf62e62] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a7ae1b958a847e98bc8] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a396ae49d5311ee6bd1] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743aa5d56999a2ebd1c4c9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a72f370c054587f81a5] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a3a32934e459acb2ceb] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ac10fd56a5e084aae1c] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a2ba8e27fcdbc3ab4f2] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a4a75b804eec44f3f2a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a64ebb181fc616bfdb4] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a9aaf019a62fd907a8a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a19730285453eb7702a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acced4c24d0ebee7c29] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743ae458a57da6a2a6280a] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a83b9f09b407c57d07e] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743acc9fc095b3aaaef755] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a587ccf84053d9950ff] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743a13d53bcf137f3784e9] (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743abb79d34fb381ebd7c1] (r:1 w:0)
	fn claim_surcharge(c: u32, ) -> Weight {
		(150_110_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_875_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_caller(r: u32, ) -> Weight {
		(143_410_000 as Weight)
			// Standard Error: 147_000
			.saturating_add((236_377_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_address(r: u32, ) -> Weight {
		(148_391_000 as Weight)
			// Standard Error: 139_000
			.saturating_add((236_781_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_gas_left(r: u32, ) -> Weight {
		(148_013_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((230_749_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_balance(r: u32, ) -> Weight {
		(146_409_000 as Weight)
			// Standard Error: 219_000
			.saturating_add((500_432_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_value_transferred(r: u32, ) -> Weight {
		(144_551_000 as Weight)
			// Standard Error: 139_000
			.saturating_add((228_993_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(147_246_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((228_601_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(150_538_000 as Weight)
			// Standard Error: 149_000
			.saturating_add((228_408_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(148_918_000 as Weight)
			// Standard Error: 131_000
			.saturating_add((229_244_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_block_number(r: u32, ) -> Weight {
		(142_597_000 as Weight)
			// Standard Error: 151_000
			.saturating_add((228_305_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_now(r: u32, ) -> Weight {
		(145_396_000 as Weight)
			// Standard Error: 133_000
			.saturating_add((228_766_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(156_322_000 as Weight)
			// Standard Error: 181_000
			.saturating_add((432_162_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_gas(r: u32, ) -> Weight {
		(130_559_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((114_844_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_input(r: u32, ) -> Weight {
		(130_329_000 as Weight)
			// Standard Error: 107_000
			.saturating_add((7_015_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(139_858_000 as Weight)
			// Standard Error: 0
			.saturating_add((1_037_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_return(r: u32, ) -> Weight {
		(124_923_000 as Weight)
			// Standard Error: 97_000
			.saturating_add((4_927_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(133_152_000 as Weight)
			// Standard Error: 0
			.saturating_add((476_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	fn seal_terminate(r: u32, ) -> Weight {
		(130_207_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((95_515_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((4 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: unknown [0x3a6368696c645f73746f726167653a64656661756c743af3fd4cc2fc8d170b6d] (r:1 w:0)
	fn seal_restore_to(r: u32, ) -> Weight {
		(158_034_000 as Weight)
			// Standard Error: 902_000
			.saturating_add((103_652_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_restore_to_per_delta(d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_031_000
			.saturating_add((2_489_391_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(7 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	fn seal_random(r: u32, ) -> Weight {
		(149_906_000 as Weight)
			// Standard Error: 244_000
			.saturating_add((593_668_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_deposit_event(r: u32, ) -> Weight {
		(160_518_000 as Weight)
			// Standard Error: 292_000
			.saturating_add((863_809_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System EventTopics (r:400 w:400)
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_109_675_000 as Weight)
			// Standard Error: 2_790_000
			.saturating_add((554_740_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 549_000
			.saturating_add((155_129_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(147_803_000 as Weight)
			// Standard Error: 136_000
			.saturating_add((156_398_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_debug_message(r: u32, ) -> Weight {
		(136_301_000 as Weight)
			// Standard Error: 133_000
			.saturating_add((128_916_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_set_storage(r: u32, ) -> Weight {
		(141_712_000 as Weight)
			// Standard Error: 664_000
			.saturating_add((547_247_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:1)
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(591_594_000 as Weight)
			// Standard Error: 291_000
			.saturating_add((42_815_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_115_000
			.saturating_add((1_046_832_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	fn seal_get_storage(r: u32, ) -> Weight {
		(20_866_000 as Weight)
			// Standard Error: 868_000
			.saturating_add((712_041_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: unknown [0x7afa01283080ef247df84e0ba38ea5a587d25ce6633a6bfbba02068c14023441] (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(588_536_000 as Weight)
			// Standard Error: 244_000
			.saturating_add((90_823_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_transfer(r: u32, ) -> Weight {
		(73_599_000 as Weight)
			// Standard Error: 1_892_000
			.saturating_add((4_978_503_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 7_759_000
			.saturating_add((11_711_769_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:101 w:0)
	// Storage: Contracts CodeStorage (r:2 w:0)
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(11_579_973_000 as Weight)
			// Standard Error: 49_873_000
			.saturating_add((3_640_499_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 18_000
			.saturating_add((32_241_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 19_000
			.saturating_add((52_034_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(205 as Weight))
			.saturating_add(RocksDbWeight::get().writes(101 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 41_527_000
			.saturating_add((21_264_449_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:101 w:101)
	// Storage: Contracts ContractInfoOf (r:101 w:101)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Contracts AccountCounter (r:1 w:1)
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(15_127_132_000 as Weight)
			// Standard Error: 54_000
			.saturating_add((34_006_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 54_000
			.saturating_add((54_942_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 54_000
			.saturating_add((181_128_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes(204 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(145_879_000 as Weight)
			// Standard Error: 158_000
			.saturating_add((230_505_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(485_127_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((465_667_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(148_329_000 as Weight)
			// Standard Error: 173_000
			.saturating_add((230_136_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(351_462_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((315_292_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(143_004_000 as Weight)
			// Standard Error: 161_000
			.saturating_add((210_341_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts CodeStorage (r:1 w:0)
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(476_308_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((131_858_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(146_997_000 as Weight)
			// Standard Error: 178_000
			.saturating_add((213_486_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: System Account (r:1 w:0)
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(484_419_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((131_991_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(21_246_000 as Weight)
			// Standard Error: 42_000
			.saturating_add((3_495_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(23_520_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((137_096_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(23_540_000 as Weight)
			// Standard Error: 309_000
			.saturating_add((215_905_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(21_326_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((13_234_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(20_904_000 as Weight)
			// Standard Error: 50_000
			.saturating_add((12_773_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(20_935_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((6_322_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(21_339_000 as Weight)
			// Standard Error: 82_000
			.saturating_add((14_272_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(21_360_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((15_509_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(34_523_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((145_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(21_353_000 as Weight)
			// Standard Error: 202_000
			.saturating_add((90_323_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(29_085_000 as Weight)
			// Standard Error: 667_000
			.saturating_add((196_178_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(224_839_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((3_856_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(21_278_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((3_285_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(21_467_000 as Weight)
			// Standard Error: 34_000
			.saturating_add((3_621_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(21_045_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((5_087_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(24_698_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((8_043_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(24_294_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((8_764_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(23_495_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((3_622_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(21_882_000 as Weight)
			// Standard Error: 526_000
			.saturating_add((2_125_852_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(21_296_000 as Weight)
			// Standard Error: 44_000
			.saturating_add((5_670_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(21_366_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((5_299_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(20_911_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((6_129_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(21_337_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((5_451_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(20_913_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((5_485_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(21_347_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((5_389_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(21_346_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((5_668_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(21_305_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_672_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(20_918_000 as Weight)
			// Standard Error: 33_000
			.saturating_add((7_623_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(21_304_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_508_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(21_312_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_438_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(21_384_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_299_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(21_326_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((7_559_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(21_265_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_751_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(20_861_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_373_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(21_348_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_378_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(20_899_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_421_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(20_913_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((7_291_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(20_990_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_237_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(20_879_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((7_391_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(20_720_000 as Weight)
			// Standard Error: 763_000
			.saturating_add((15_090_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(21_323_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((12_640_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(21_341_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((13_299_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(21_384_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((12_555_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(20_874_000 as Weight)
			// Standard Error: 24_000
			.saturating_add((7_587_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(20_939_000 as Weight)
			// Standard Error: 67_000
			.saturating_add((7_450_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(20_943_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((7_286_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(21_251_000 as Weight)
			// Standard Error: 30_000
			.saturating_add((7_849_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(20_909_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_581_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(20_897_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_455_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(21_255_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_629_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(21_306_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((7_479_000 as Weight).saturating_mul(r as Weight))
	}
}
